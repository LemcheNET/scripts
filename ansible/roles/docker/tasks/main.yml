---
- name: "Create {{ volume_group_name }} volume group"
  tags:
    - create_vg
  become: yes
  lvg:
    vg: "{{ volume_group_name }}"
    pvs: "{{ physical_volumes_devices }}"

- name: "Create {{ logical_volume_name }} logical volume"
  tags:
    - create_lv
  become: yes
  lvol:
    lv: "{{ logical_volume_name }}"
    size: "{{ logical_volume_size }}"
    vg: "{{ volume_group_name }}"

- name: "Create {{ filesystem_type }} on /dev/{{ volume_group_name }}/{{ logical_volume_name }}"
  tags:
    - create_partition
  become: yes
  filesystem:
    dev: "/dev/{{ volume_group_name }}/{{ logical_volume_name }}"
    fstype: "{{ filesystem_type }}"

- name: "Mount /dev/mapper/{{ volume_group_name }}-{{ logical_volume_name }} {{ mount_point }}"
  tags:
    - mount_partition
  become: yes
  mount:
    fstype: "{{ filesystem_type }}"
    opts: "{{ filesystem_options }}"
    path: "{{ mount_point }}"
    src: "/dev/mapper/{{ volume_group_name }}-{{ logical_volume_name }}"
    state: mounted

- name: Adding Docker repository GPG key
  tags:
    - add_apt_key
  become: yes
  apt_key:
    url: "{{ docker_repository_gpg_url }}"
    id: "{{ docker_repository_gqg_id }}"
    state: present
  environment:
    https_proxy: "{{ http_proxy }}"

- name: Add Docker apt repository
  tags:
    - add_docker_repo
  become: yes
  apt_repository:
    filename: "{{ docker_repository_file | regex_replace ('.list') }}"
    repo: "{{ repository }}"
    state: present
    update_cache: true
  with_items:
    - "{{ docker_repositories }}"
  loop_control:
    loop_var: repository

- name: "Look up full package name for Docker version {{ docker_version }}"
  register: _apt_cache
  tags:
    - apt_cache
  shell: "apt-cache madison docker-ce | grep {{ docker_version }} | head -1 | awk '{print $3}'"
  when: docker_version is defined

- name: Setting Docker package name
  tags:
    - set_docker_package
  set_fact:
    docker_package: "docker-ce={{ _apt_cache.stdout }}"
  when: docker_version is defined

- name: "Installing {{ docker_package }}"
  tags:
    - install_docker_package
  become: yes
  apt:
    autoclean: true
    name: "{{ docker_package }}"
    state: present

- name: Prevent docker-ce package to be upgraded
  tags:
    - apt_mark
  become: yes
  command: "apt-mark hold docker-ce"
  when: docker_version is defined

- name: Copy Docker UFW application rule
  tags:
    - ufw-docker-rule-file
  become: yes
  template:
    src: "{{ docker_ufw_application_file }}"
    dest: "/etc/ufw/applications.d/{{ docker_ufw_application_file | regex_replace('.ufw.j2') }}"
    owner: root
    group: root
    mode: 0644

- name: Enable dockerd application in UFW
  tags:
    - allow-docker-ufw
  become: yes
  ufw:
    name: dockerd
    state: enabled

- name: Create dockerd systemd service directory
  tags:
    - create_dockerd_systemd_directory
  become: yes
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory

- name: Configure dockerd systemd start properties'
  tags:
    - configure_dockerd_systemd
  become: yes
  template:
    src: "{{ _systemd_configuration_file }}"
    dest: "/etc/systemd/system/docker.service.d/{{ _systemd_configuration_file | regex_replace('.j2') }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - "http-proxy.conf.j2"
    - "override.conf.j2"
  loop_control:
    loop_var: _systemd_configuration_file

- name: Create dockerd daemon.json configuration file'
  tags:
    - configure_dockerd_systemd
  become: yes
  template:
    src: "daemon.json.j2"
    dest: "/etc/docker/daemon.json"
    owner: root
    group: root
    mode: 0644

- name: Restart dockerd
  tags:
    - restart-dockerd
  become: yes
  systemd:
    daemon_reload: true
    name: docker
    state: restarted

- name: Install docker python modules
  tags:
    - docker_python
  become: yes
  pip:
    name: docker-py
    state: present
  environment:
    https_proxy: "{{ https_proxy }}"

- name: "Add {{ ansible_user }} to docker group"
  tags:
    - add_user_to_group
  become: yes
  user:
    name: "{{ ansible_user }}"
    groups: "docker"
    append: yes

- name: Test that docker can run hello-world image
  tags:
    - test_docker
  become: yes
  docker_container:
    image: hello-world
    name: hello-world

# add task to delete hello-world
